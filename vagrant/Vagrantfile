# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  # Define a VM with a name
  config.vm.define "kcdbd-tracing-demo" do |tracing|

    tracing.vm.box = "ubuntu/focal64" # ubuntu 20.04 Server

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # tracing.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    tracing.vm.network "forwarded_port", guest: 8001, host: 8001
    tracing.vm.network "forwarded_port", guest: 8002, host: 8002
    tracing.vm.network "forwarded_port", guest: 8003, host: 8003
    tracing.vm.network "forwarded_port", guest: 8004, host: 8004
    tracing.vm.network "forwarded_port", guest: 8005, host: 8005
    tracing.vm.network "forwarded_port", guest: 8080, host: 8080

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # tracing.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # tracing.vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # tracing.vm.network "public_network"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # tracing.vm.synced_folder "../data", "/vagrant_data"

    # Disable the default share of the current code directory. Doing this
    # provides improved isolation between the vagrant box and your host
    # by making sure your Vagrantfile isn't accessible to the vagrant box.
    # If you use this you may want to enable additional shared subfolders as
    # shown above.
    # tracing.vm.synced_folder ".", "/vagrant", disabled: false

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    tracing.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
      # vb.memory = "4096"
      vb.memory = "8192"
      # vb.cpus = 2
      vb.cpus = 4
    end
    #
    # View the documentation for the provider you are using for more
    # information on available options.

    # Enable provisioning with a shell script. Additional provisioners such as
    # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
    # documentation for more information about their specific syntax and use.
    tracing.vm.provision "shell", inline: <<-SHELL
      apt-get update && apt-get upgrade -y

      # install docker for container environment
      sudo apt install docker.io -y
      sudo usermod -aG docker $USER && newgrp docker

      # install minikube for use Kubernetes environment
      curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
      sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64

      # install kubectl
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
      echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      kubectl version --client

      sudo systemctl reboot

      # Before START minikube
      # sudo usermod -aG docker $USER && newgrp docker
      # minikube start --kubernetes-version=v1.29.4 --nodes 1 --cpus 4 --memory 4096 --disk-size 25g --driver=docker

      # kubectl --namespace default port-forward svc/kcd-tracing-demo-frontendproxy 8080:8080 --address 0.0.0.0

    SHELL
  end
end